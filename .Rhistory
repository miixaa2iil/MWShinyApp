}
export_data(myDB, data=data.frame(a=1), my_table = "table", initial = TRUE)
RSQLite::dbWriteTable(myDB, "tabula", data.frame(a=1))
export_data <- function(conn, data, my_table, tmp_table = "temp", initial = FALSE){
my_table <- my_table
if(initial){
RSQLite::dbWriteTable(conn=conn, name=my_table,  data=data)
#RSQLite::dbWriteTable(conn=conn, name=my_table, data=data) # to create a table in a database
}else{
RSQLite::dbWriteTable(conn, name=tmp_table, data) # temp table
RSQLite::dbExecute(conn,
paste0("INSERT INTO ",
my_table,
" ",
"SELECT * ",
"FROM ",
tmp_table
)
) #
RSQLite::dbExecute(conn,
paste0(
"ALTER TABLE ",
my_table,
" ",
"ADD COLUMN isDuplicate INT"))
RSQLite::dbExecute(conn,
paste0("UPDATE ",
my_table,
" ",
"SET isDuplicate =(SELECT ROW_NUMBER() OVER(",
"PARTITION BY performerType, performerName, cooperationForm, cooperatorName ",
"ORDER BY performerType, performerName, cooperationForm, cooperatorName) mb ",
"FROM ",
my_table,
")"
))
RSQLite::dbExecute(conn,
paste(
"DELETE FROM ",
my_table,
" ",
"WHERE isDuplicate > 1"
))
RSQLite::dbExecute(conn,
paste0("ALTER TABLE ",
my_table,
" ",
"DROP COLUMN isDuplicate")
)
RSQLite::dbExecute(conn,
paste0("DROP TABLE ",
tmp_table
)) # temp table deletion
}
}
export_data(myDB, data=data.frame(a=1), my_table = "table", initial = TRUE)
export_data <- function(conn, data, my_table, tmp_table = "temp", initial = FALSE){
#my_table <- my_table
if(initial){
RSQLite::dbWriteTable(conn=conn, name="ala"  data=data)
export_data <- function(conn, data, my_table, tmp_table = "temp", initial = FALSE){
#my_table <- my_table
if(initial){
RSQLite::dbWriteTable(conn=conn, name="ala",  data=data)
#RSQLite::dbWriteTable(conn=conn, name=my_table, data=data) # to create a table in a database
}else{
RSQLite::dbWriteTable(conn, name=tmp_table, data) # temp table
RSQLite::dbExecute(conn,
paste0("INSERT INTO ",
my_table,
" ",
"SELECT * ",
"FROM ",
tmp_table
)
) #
RSQLite::dbExecute(conn,
paste0(
"ALTER TABLE ",
my_table,
" ",
"ADD COLUMN isDuplicate INT"))
RSQLite::dbExecute(conn,
paste0("UPDATE ",
my_table,
" ",
"SET isDuplicate =(SELECT ROW_NUMBER() OVER(",
"PARTITION BY performerType, performerName, cooperationForm, cooperatorName ",
"ORDER BY performerType, performerName, cooperationForm, cooperatorName) mb ",
"FROM ",
my_table,
")"
))
RSQLite::dbExecute(conn,
paste(
"DELETE FROM ",
my_table,
" ",
"WHERE isDuplicate > 1"
))
RSQLite::dbExecute(conn,
paste0("ALTER TABLE ",
my_table,
" ",
"DROP COLUMN isDuplicate")
)
RSQLite::dbExecute(conn,
paste0("DROP TABLE ",
tmp_table
)) # temp table deletion
}
}
export_data(myDB, data=data.frame(a=1), my_table = "table", initial = TRUE)
detach("package:RSQLite", unload = TRUE)
detach("package:MWShinyApp", unload = TRUE)
library(RSQLite)
export_data(myDB, data=data.frame(a=1), my_table = "table", initial = TRUE)
DBI::dbWriteTable(myBD, "tabela", data.frame(a=1))
DBI::dbWriteTable(myDB, "tabela", data.frame(a=1))
moja <- funtion(nazwa, dane){RSQLite::dbWriteTable(myDB, nazwa, dane)}
moja <- funtion(nazwa, dane) RSQLite::dbWriteTable(myDB, nazwa, dane)
moja <- function(nazwa, dane) RSQLite::dbWriteTable(myDB, nazwa, dane)
moja("a", data.frame(b=10))
moja <- function(pol, nazwa, dane) RSQLite::dbWriteTable(pol, nazwa, dane)
moja(myDB, "b", data.frame(b=10))
export_data <- function(cnctn, data, my_table, tmp_table = "temp", initial = FALSE){
if(initial){
RSQLite::dbWriteTable(cnctn name=my_table, data=data) # to create a table in a database
export_data <- function(cnctn, data, my_table, tmp_table = "temp", initial = FALSE){
if(initial){
RSQLite::dbWriteTable(cnctn name=my_table, data=data) # to create a table in a database
export_data <- function(cnctn, data, my_table, tmp_table = "temp", initial = FALSE){
if(initial){
RSQLite::dbWriteTable(cnctn, name=my_table, data=data) # to create a table in a database
}else{
RSQLite::dbWriteTable(cnctn, name=tmp_table, data) # temp table
RSQLite::dbExecute(cnctn,
paste0("INSERT INTO ",
my_table,
" ",
"SELECT * ",
"FROM ",
tmp_table
)
) #
RSQLite::dbExecute(cnctn,
paste0(
"ALTER TABLE ",
my_table,
" ",
"ADD COLUMN isDuplicate INT"))
RSQLite::dbExecute(cnctn,
paste0("UPDATE ",
my_table,
" ",
"SET isDuplicate =(SELECT ROW_NUMBER() OVER(",
"PARTITION BY performerType, performerName, cooperationForm, cooperatorName ",
"ORDER BY performerType, performerName, cooperationForm, cooperatorName) mb ",
"FROM ",
my_table,
")"
))
RSQLite::dbExecute(cnctn,
paste(
"DELETE FROM ",
my_table,
" ",
"WHERE isDuplicate > 1"
))
RSQLite::dbExecute(cnctn,
paste0("ALTER TABLE ",
my_table,
" ",
"DROP COLUMN isDuplicate")
)
RSQLite::dbExecute(cnctn,
paste0("DROP TABLE ",
tmp_table
)) # temp table deletion
}
}
export_data(myDB, data=data.frame(a=1), my_table = "table", initial = TRUE)
export_data <- function(cnctn, data, my_table, tmp_table = "temp", initial = FALSE){
#   if(initial){
RSQLite::dbWriteTable(cnctn, name=my_table, data=data) # to create a table in a database
#   }else{
#     RSQLite::dbWriteTable(cnctn, name=tmp_table, data) # temp table
#     RSQLite::dbExecute(cnctn,
#                        paste0("INSERT INTO ",
#                               my_table,
#                               " ",
#                               "SELECT * ",
#                               "FROM ",
#                               tmp_table
#                        )
#     ) #
#     RSQLite::dbExecute(cnctn,
#                        paste0(
#                          "ALTER TABLE ",
#                          my_table,
#                          " ",
#                          "ADD COLUMN isDuplicate INT"))
#
#     RSQLite::dbExecute(cnctn,
#                        paste0("UPDATE ",
#                               my_table,
#                               " ",
#                               "SET isDuplicate =(SELECT ROW_NUMBER() OVER(",
#                               "PARTITION BY performerType, performerName, cooperationForm, cooperatorName ",
#                               "ORDER BY performerType, performerName, cooperationForm, cooperatorName) mb ",
#                               "FROM ",
#                               my_table,
#                               ")"
#                        ))
#
#     RSQLite::dbExecute(cnctn,
#                        paste(
#                          "DELETE FROM ",
#                          my_table,
#                          " ",
#                          "WHERE isDuplicate > 1"
#                        ))
#
#     RSQLite::dbExecute(cnctn,
#                        paste0("ALTER TABLE ",
#                               my_table,
#                               " ",
#                               "DROP COLUMN isDuplicate")
#     )
#     RSQLite::dbExecute(cnctn,
#                        paste0("DROP TABLE ",
#                               tmp_table
#                        )) # temp table deletion
#
#   }
}
export_data(myDB, data=data.frame(a=1), my_table = "table", initial = TRUE)
export_data <- function(data, my_table, tmp_table = "temp", initial = FALSE){
#   if(initial){
RSQLite::dbWriteTable(myDB, name=my_table, data=data) # to create a table in a database
#   }else{
#     RSQLite::dbWriteTable(cnctn, name=tmp_table, data) # temp table
#     RSQLite::dbExecute(cnctn,
#                        paste0("INSERT INTO ",
#                               my_table,
#                               " ",
#                               "SELECT * ",
#                               "FROM ",
#                               tmp_table
#                        )
#     ) #
#     RSQLite::dbExecute(cnctn,
#                        paste0(
#                          "ALTER TABLE ",
#                          my_table,
#                          " ",
#                          "ADD COLUMN isDuplicate INT"))
#
#     RSQLite::dbExecute(cnctn,
#                        paste0("UPDATE ",
#                               my_table,
#                               " ",
#                               "SET isDuplicate =(SELECT ROW_NUMBER() OVER(",
#                               "PARTITION BY performerType, performerName, cooperationForm, cooperatorName ",
#                               "ORDER BY performerType, performerName, cooperationForm, cooperatorName) mb ",
#                               "FROM ",
#                               my_table,
#                               ")"
#                        ))
#
#     RSQLite::dbExecute(cnctn,
#                        paste(
#                          "DELETE FROM ",
#                          my_table,
#                          " ",
#                          "WHERE isDuplicate > 1"
#                        ))
#
#     RSQLite::dbExecute(cnctn,
#                        paste0("ALTER TABLE ",
#                               my_table,
#                               " ",
#                               "DROP COLUMN isDuplicate")
#     )
#     RSQLite::dbExecute(cnctn,
#                        paste0("DROP TABLE ",
#                               tmp_table
#                        )) # temp table deletion
#
#   }
}
export_data(myDB, data=data.frame(a=1), my_table = "table", initial = TRUE)
export_data <- function(conn, data, initial = FALSE){
myTable <- "musicians_bands"
tmpTable <- "temp"
if(initial){
dbWriteTable(conn, myTable, data) # to create a table in a database
}else{
dbWriteTable(conn, "temp", data) # temp table
dbExecute(conn,
paste0("INSERT INTO ",
myTable,
" ",
"SELECT * ",
"FROM ",
tmpTable
)
) #
dbExecute(conn,
paste0(
"ALTER TABLE ",
myTable,
" ",
"ADD COLUMN isDuplicate INT"))
dbExecute(conn,
paste0("UPDATE ",
myTable,
" ",
"SET isDuplicate =(SELECT ROW_NUMBER() OVER(",
"PARTITION BY performerType, performerName, cooperationForm, cooperatorName ",
"ORDER BY performerType, performerName, cooperationForm, cooperatorName) mb ",
"FROM ",
myTable,
")"
))
dbExecute(conn,
paste(
"DELETE FROM ",
myTable,
" ",
"WHERE isDuplicate > 1"
))
dbExecute(conn,
paste0("ALTER TABLE ",
myTable,
" ",
"DROP COLUMN isDuplicate")
)
# dbGetQuery(conn,
#            paste(
#            "WITH cte AS (",
#            "SELECT *, ",
#            "ROW_NUMBER() OVER (",
#            "PARTITION BY performerType, performerName, cooperationForm, cooperatorName ",
#            "ORDER BY performerType, performerName, cooperationForm, cooperatorName) mb ",
#            "FROM musicians_bands ",
#            "DELETE FROM cte",
#            "WHERE mb > 1")) # duplicates dropping
dbExecute(conn,
paste0("DROP TABLE ",
tmpTable
)) # temp table deletion
}
}
export_data <- function(conn, data, my_table, initial = FALSE){
tmpTable <- "temp"
if(initial){
dbWriteTable(conn, my_table, data) # to create a table in a database
}else{
dbWriteTable(conn, "temp", data) # temp table
dbExecute(conn,
paste0("INSERT INTO ",
my_table,
" ",
"SELECT * ",
"FROM ",
tmpTable
)
) #
dbExecute(conn,
paste0(
"ALTER TABLE ",
my_table,
" ",
"ADD COLUMN isDuplicate INT"))
dbExecute(conn,
paste0("UPDATE ",
my_table,
" ",
"SET isDuplicate =(SELECT ROW_NUMBER() OVER(",
"PARTITION BY performerType, performerName, cooperationForm, cooperatorName ",
"ORDER BY performerType, performerName, cooperationForm, cooperatorName) mb ",
"FROM ",
my_table,
")"
))
dbExecute(conn,
paste(
"DELETE FROM ",
my_table,
" ",
"WHERE isDuplicate > 1"
))
dbExecute(conn,
paste0("ALTER TABLE ",
my_table,
" ",
"DROP COLUMN isDuplicate")
)
# dbGetQuery(conn,
#            paste(
#            "WITH cte AS (",
#            "SELECT *, ",
#            "ROW_NUMBER() OVER (",
#            "PARTITION BY performerType, performerName, cooperationForm, cooperatorName ",
#            "ORDER BY performerType, performerName, cooperationForm, cooperatorName) mb ",
#            "FROM musicians_bands ",
#            "DELETE FROM cte",
#            "WHERE mb > 1")) # duplicates dropping
dbExecute(conn,
paste0("DROP TABLE ",
tmpTable
)) # temp table deletion
}
}
export_data(myDB, data=data.frame(a=1), my_table = "table", initial = TRUE)
export_data <- function(conn, data, my_table, tmp_table = "temp", initial = FALSE){
if(initial){
RSQLite::dbWriteTable(conn, my_table, data) # to create a table in a database
}else{
RSQLite::dbWriteTable(conn, "temp", data) # temp table
RSQLite::dbExecute(conn,
paste0("INSERT INTO ",
my_table,
" ",
"SELECT * ",
"FROM ",
tmp_table
)
) #
RSQLite::dbExecute(conn,
paste0(
"ALTER TABLE ",
my_table,
" ",
"ADD COLUMN isDuplicate INT"))
RSQLite::dbExecute(conn,
paste0("UPDATE ",
my_table,
" ",
"SET isDuplicate =(SELECT ROW_NUMBER() OVER(",
"PARTITION BY performerType, performerName, cooperationForm, cooperatorName ",
"ORDER BY performerType, performerName, cooperationForm, cooperatorName) mb ",
"FROM ",
my_table,
")"
))
RSQLite::dbExecute(conn,
paste(
"DELETE FROM ",
my_table,
" ",
"WHERE isDuplicate > 1"
))
RSQLite::dbExecute(conn,
paste0("ALTER TABLE ",
my_table,
" ",
"DROP COLUMN isDuplicate")
)
RSQLite::dbExecute(conn,
paste0("DROP TABLE ",
tmp_table
)) # temp table deletion
}
}
export_data(myDB, data=data.frame(a=1), my_table = "tavola", initial = TRUE)
remove.packages("MWShinyApp")
install.packages("C:/Users/miixaa2iil/Desktop/Programowanie/R/MWShinyApp_0.2.0.tar.gz", repos = NULL, type = "source")
MWShinyApp::initData
MWShinyApp::run_mw_app()
library(MWShinyApp)
detach("package:MWShinyApp", unload = TRUE)
remove.packages("MWShinyApp")
rm(list=ls())
gc()
install.packages("C:/Users/miixaa2iil/Desktop/Programowanie/R/MWShinyApp_0.2.0.tar.gz", repos = NULL, type = "source")
library(MWShinyApp)
run_mw_app()
remove.packages("MWShinyApp")
install.packages("C:/Users/miixaa2iil/Desktop/Programowanie/R/MWShinyApp_0.2.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/miixaa2iil/Desktop/Programowanie/R/MWShinyApp_0.2.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/miixaa2iil/Desktop/Programowanie/R/MWShinyApp_0.2.0.tar.gz", repos = NULL, type = "source")
library(MWShinyApp)
run_mw_app()
detach("package:MWShinyApp", unload = TRUE)
remove.packages("MWShinyApp")
install.packages("C:/Users/miixaa2iil/Desktop/Programowanie/R/MWShinyApp_0.2.0.tar.gz", repos = NULL, type = "source")
library(MWShinyApp)
run_mw_app()
detach("package:MWShinyApp", unload = TRUE)
remove.packages("MWShinyApp")
rm(list=ls)
rm(list=ls())
gc()
install.packages("C:/Users/miixaa2iil/Desktop/Programowanie/R/MWShinyApp_0.2.0.tar.gz", repos = NULL, type = "source")
library(MWShinyApp)
run_mw_app()
detach("package:MWShinyApp", unload = TRUE)
remove.packages("MWShinyApp")
rm(list=ls())
gc()
install.packages("C:/Users/miixaa2iil/Desktop/Programowanie/R/MWShinyApp_0.2.0.tar.gz", repos = NULL, type = "source")
library(MWShinyApp)
run_mw_app()
getwd()
setwd("C:/Users/miixaa2iil/Desktop/Sprawy/Praca/Rekrutacje/Seargin/ShinyAppMW")
library(golem)
add_dockerfile()
library(golem)
add_dockerfile()
library(golem)
